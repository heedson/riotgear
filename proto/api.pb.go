// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		PlayerIDReq
		PlayerID
		PlayerRankReq
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mwitkow/go-proto-validators"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PlayerIDReq struct {
	RegionName string `protobuf:"bytes,1,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
}

func (m *PlayerIDReq) Reset()                    { *m = PlayerIDReq{} }
func (m *PlayerIDReq) String() string            { return proto1.CompactTextString(m) }
func (*PlayerIDReq) ProtoMessage()               {}
func (*PlayerIDReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *PlayerIDReq) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

func (m *PlayerIDReq) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type PlayerID struct {
	PlayerId int64 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (m *PlayerID) Reset()                    { *m = PlayerID{} }
func (m *PlayerID) String() string            { return proto1.CompactTextString(m) }
func (*PlayerID) ProtoMessage()               {}
func (*PlayerID) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *PlayerID) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type PlayerRankReq struct {
	RegionName string `protobuf:"bytes,1,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
}

func (m *PlayerRankReq) Reset()                    { *m = PlayerRankReq{} }
func (m *PlayerRankReq) String() string            { return proto1.CompactTextString(m) }
func (*PlayerRankReq) ProtoMessage()               {}
func (*PlayerRankReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *PlayerRankReq) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

func (m *PlayerRankReq) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func init() {
	proto1.RegisterType((*PlayerIDReq)(nil), "PlayerIDReq")
	golang_proto.RegisterType((*PlayerIDReq)(nil), "PlayerIDReq")
	proto1.RegisterType((*PlayerID)(nil), "PlayerID")
	golang_proto.RegisterType((*PlayerID)(nil), "PlayerID")
	proto1.RegisterType((*PlayerRankReq)(nil), "PlayerRankReq")
	golang_proto.RegisterType((*PlayerRankReq)(nil), "PlayerRankReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Riotgear service

type RiotgearClient interface {
	GetPlayerID(ctx context.Context, in *PlayerIDReq, opts ...grpc.CallOption) (*PlayerID, error)
	GetPlayerRank(ctx context.Context, in *PlayerRankReq, opts ...grpc.CallOption) (*PlayerID, error)
}

type riotgearClient struct {
	cc *grpc.ClientConn
}

func NewRiotgearClient(cc *grpc.ClientConn) RiotgearClient {
	return &riotgearClient{cc}
}

func (c *riotgearClient) GetPlayerID(ctx context.Context, in *PlayerIDReq, opts ...grpc.CallOption) (*PlayerID, error) {
	out := new(PlayerID)
	err := grpc.Invoke(ctx, "/Riotgear/GetPlayerID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotgearClient) GetPlayerRank(ctx context.Context, in *PlayerRankReq, opts ...grpc.CallOption) (*PlayerID, error) {
	out := new(PlayerID)
	err := grpc.Invoke(ctx, "/Riotgear/GetPlayerRank", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Riotgear service

type RiotgearServer interface {
	GetPlayerID(context.Context, *PlayerIDReq) (*PlayerID, error)
	GetPlayerRank(context.Context, *PlayerRankReq) (*PlayerID, error)
}

func RegisterRiotgearServer(s *grpc.Server, srv RiotgearServer) {
	s.RegisterService(&_Riotgear_serviceDesc, srv)
}

func _Riotgear_GetPlayerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotgearServer).GetPlayerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Riotgear/GetPlayerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotgearServer).GetPlayerID(ctx, req.(*PlayerIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Riotgear_GetPlayerRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotgearServer).GetPlayerRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Riotgear/GetPlayerRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotgearServer).GetPlayerRank(ctx, req.(*PlayerRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Riotgear_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Riotgear",
	HandlerType: (*RiotgearServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerID",
			Handler:    _Riotgear_GetPlayerID_Handler,
		},
		{
			MethodName: "GetPlayerRank",
			Handler:    _Riotgear_GetPlayerRank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *PlayerIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RegionName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RegionName)))
		i += copy(dAtA[i:], m.RegionName)
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *PlayerID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PlayerId))
	}
	return i, nil
}

func (m *PlayerRankReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRankReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RegionName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RegionName)))
		i += copy(dAtA[i:], m.RegionName)
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PlayerIDReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *PlayerID) Size() (n int) {
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovApi(uint64(m.PlayerId))
	}
	return n
}

func (m *PlayerRankReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerRankReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRankReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRankReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("api.proto", fileDescriptorApi) }
func init() { golang_proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x8a, 0x13, 0x31,
	0x18, 0xc7, 0x49, 0x8b, 0xd2, 0x49, 0xad, 0x87, 0x9c, 0x4a, 0x95, 0xb1, 0x8e, 0x07, 0x4b, 0x71,
	0x26, 0x5a, 0xd1, 0x83, 0x17, 0x51, 0x04, 0x29, 0x82, 0xd6, 0xb9, 0x08, 0xa2, 0x48, 0x3a, 0x13,
	0xd3, 0xd0, 0x4e, 0xbe, 0x31, 0x93, 0xb6, 0x48, 0xe9, 0x41, 0x1f, 0x41, 0x5f, 0x68, 0x6f, 0xbb,
	0xc7, 0x85, 0x7d, 0x81, 0xa5, 0xbb, 0x0f, 0xb2, 0x34, 0x33, 0x1d, 0xa6, 0xec, 0xb2, 0xa7, 0x3d,
	0x25, 0xdf, 0x97, 0x5f, 0xfe, 0xff, 0xfc, 0xc3, 0x87, 0x1d, 0x96, 0xca, 0x20, 0xd5, 0x60, 0xa0,
	0xe3, 0x0b, 0x69, 0x26, 0xf3, 0x71, 0x10, 0x41, 0x42, 0x05, 0x08, 0xa0, 0xb6, 0x3d, 0x9e, 0xff,
	0xb4, 0x95, 0x2d, 0xec, 0xae, 0xc0, 0x5f, 0x56, 0xf0, 0x64, 0x29, 0xcd, 0x14, 0x96, 0x54, 0x80,
	0x6f, 0x0f, 0xfd, 0x05, 0x9b, 0xc9, 0x98, 0x19, 0xd0, 0x19, 0x2d, 0xb7, 0xc5, 0xbd, 0xfb, 0x02,
	0x40, 0xcc, 0x38, 0x65, 0xa9, 0xa4, 0x4c, 0x29, 0x30, 0xcc, 0x48, 0x50, 0x59, 0x71, 0xfa, 0xc4,
	0x2e, 0x91, 0x2f, 0xb8, 0xf2, 0xb3, 0x25, 0x13, 0x82, 0x6b, 0x0a, 0xa9, 0x25, 0x2e, 0xd3, 0xde,
	0x27, 0xdc, 0x1c, 0xcd, 0xd8, 0x6f, 0xae, 0x87, 0xef, 0x42, 0xfe, 0x8b, 0x3c, 0xc0, 0x4d, 0xcd,
	0x85, 0x04, 0xf5, 0x43, 0xb1, 0x84, 0xb7, 0x51, 0x17, 0xf5, 0x9c, 0x10, 0xe7, 0xad, 0x8f, 0x2c,
	0xe1, 0x5b, 0x20, 0xb5, 0x7c, 0x0e, 0xd4, 0x72, 0x20, 0x6f, 0x6d, 0x01, 0xef, 0x31, 0x6e, 0xec,
	0x04, 0xc9, 0x3d, 0xec, 0x14, 0xb0, 0x8c, 0xad, 0x56, 0x3d, 0x6c, 0xe4, 0x8d, 0x61, 0xec, 0x7d,
	0xc6, 0xad, 0x1c, 0x0c, 0x99, 0x9a, 0xde, 0x88, 0xf7, 0xe0, 0x10, 0xe1, 0x46, 0x28, 0xc1, 0x08,
	0xce, 0x34, 0xf9, 0x8e, 0x9b, 0xef, 0xb9, 0x29, 0xdf, 0x72, 0x27, 0xa8, 0xe4, 0xec, 0x38, 0x65,
	0xe5, 0xbd, 0xf8, 0x7b, 0x72, 0xfe, 0xbf, 0x46, 0x89, 0x6f, 0xff, 0x73, 0xf1, 0x8c, 0xae, 0x2a,
	0xaf, 0x58, 0xd3, 0x5c, 0x9e, 0xae, 0x2a, 0xce, 0x6b, 0x2a, 0x63, 0xf2, 0x0d, 0xb7, 0x4a, 0xf9,
	0x6d, 0x02, 0x72, 0x37, 0xd8, 0x8b, 0x53, 0xb5, 0x78, 0x6a, 0x2d, 0xfa, 0xa4, 0x77, 0xb5, 0x85,
	0x66, 0x6a, 0xba, 0x6f, 0xf0, 0xf6, 0x0f, 0xfa, 0xf7, 0xe6, 0x03, 0xb9, 0x35, 0xa8, 0x7f, 0x91,
	0xa3, 0x3e, 0x42, 0xfa, 0x35, 0x6e, 0xef, 0x82, 0x75, 0x33, 0xae, 0x17, 0x32, 0xe2, 0xdd, 0x0c,
	0xe6, 0x3a, 0xe2, 0x01, 0x79, 0x34, 0x31, 0x26, 0xcd, 0x5e, 0x51, 0x5a, 0x19, 0xa7, 0x09, 0xe7,
	0x71, 0x06, 0x8a, 0xea, 0xe2, 0xd2, 0xd1, 0xc6, 0x45, 0xc7, 0x1b, 0x17, 0x9d, 0x6e, 0x5c, 0x74,
	0x70, 0xe6, 0xa2, 0xaf, 0x0f, 0xaf, 0x81, 0x8b, 0xb1, 0xbd, 0x6d, 0x97, 0xe7, 0x17, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xb3, 0x51, 0xfe, 0x9d, 0xe1, 0x02, 0x00, 0x00,
}
