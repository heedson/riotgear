// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	PlayerIDReq
	PlayerID
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"
import _ "github.com/gogo/googleapis/google/api"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PlayerIDReq struct {
	RegionName string `protobuf:"bytes,1,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
}

func (m *PlayerIDReq) Reset()                    { *m = PlayerIDReq{} }
func (m *PlayerIDReq) String() string            { return proto1.CompactTextString(m) }
func (*PlayerIDReq) ProtoMessage()               {}
func (*PlayerIDReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *PlayerIDReq) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

func (m *PlayerIDReq) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type PlayerID struct {
	PlayerId int64 `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (m *PlayerID) Reset()                    { *m = PlayerID{} }
func (m *PlayerID) String() string            { return proto1.CompactTextString(m) }
func (*PlayerID) ProtoMessage()               {}
func (*PlayerID) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *PlayerID) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func init() {
	proto1.RegisterType((*PlayerIDReq)(nil), "PlayerIDReq")
	proto1.RegisterType((*PlayerID)(nil), "PlayerID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Riotgear service

type RiotgearClient interface {
	GetPlayerID(ctx context.Context, in *PlayerIDReq, opts ...grpc.CallOption) (*PlayerID, error)
}

type riotgearClient struct {
	cc *grpc.ClientConn
}

func NewRiotgearClient(cc *grpc.ClientConn) RiotgearClient {
	return &riotgearClient{cc}
}

func (c *riotgearClient) GetPlayerID(ctx context.Context, in *PlayerIDReq, opts ...grpc.CallOption) (*PlayerID, error) {
	out := new(PlayerID)
	err := grpc.Invoke(ctx, "/Riotgear/GetPlayerID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Riotgear service

type RiotgearServer interface {
	GetPlayerID(context.Context, *PlayerIDReq) (*PlayerID, error)
}

func RegisterRiotgearServer(s *grpc.Server, srv RiotgearServer) {
	s.RegisterService(&_Riotgear_serviceDesc, srv)
}

func _Riotgear_GetPlayerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotgearServer).GetPlayerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Riotgear/GetPlayerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotgearServer).GetPlayerID(ctx, req.(*PlayerIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Riotgear_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Riotgear",
	HandlerType: (*RiotgearServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerID",
			Handler:    _Riotgear_GetPlayerID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto1.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xd9, 0x15, 0xa4, 0x4d, 0x3d, 0xf5, 0x24, 0xab, 0xa0, 0xd6, 0x83, 0x5e, 0xda, 0x41,
	0x45, 0x1f, 0x40, 0x04, 0xd9, 0x8b, 0x4a, 0x8f, 0x82, 0x48, 0xd6, 0x0c, 0xd9, 0xc1, 0x36, 0x53,
	0xd3, 0xb8, 0x8b, 0x2c, 0x7b, 0xf1, 0x15, 0x7c, 0x34, 0x5f, 0xc1, 0x07, 0x91, 0x4d, 0xba, 0xa5,
	0xa7, 0x24, 0xff, 0x7c, 0xf3, 0xe7, 0x9f, 0x11, 0xb1, 0x6c, 0xa8, 0x68, 0x2c, 0x3b, 0x9e, 0xdc,
	0x68, 0x72, 0xf3, 0xcf, 0x59, 0xf1, 0xc6, 0x35, 0xd4, 0x4b, 0x72, 0xef, 0xbc, 0x04, 0xcd, 0xb9,
	0x2f, 0xe6, 0x0b, 0x59, 0x91, 0x92, 0x8e, 0x6d, 0x0b, 0xfd, 0xb5, 0xeb, 0x3b, 0xd4, 0xcc, 0xba,
	0x42, 0x90, 0x0d, 0x81, 0x34, 0x86, 0x9d, 0x74, 0xc4, 0xa6, 0x0d, 0xd5, 0xec, 0x51, 0x24, 0x4f,
	0x95, 0xfc, 0x42, 0x3b, 0xbd, 0x2b, 0xf1, 0x23, 0x3d, 0x12, 0x89, 0x45, 0x4d, 0x6c, 0x5e, 0x8d,
	0xac, 0x71, 0x7f, 0x74, 0x3c, 0x3a, 0x8f, 0x4b, 0x11, 0xa4, 0x07, 0x59, 0xe3, 0x06, 0x68, 0x3c,
	0x1f, 0x80, 0x71, 0x00, 0x82, 0xb4, 0x01, 0xb2, 0x33, 0x11, 0x6d, 0x0d, 0xd3, 0x03, 0x11, 0x77,
	0x30, 0x29, 0xef, 0xb5, 0x53, 0x46, 0x41, 0x98, 0xaa, 0x4b, 0x12, 0x51, 0x49, 0xec, 0x34, 0x4a,
	0x9b, 0xbe, 0x88, 0xe4, 0x1e, 0x5d, 0xdf, 0xb7, 0x57, 0x0c, 0x32, 0x4d, 0xe2, 0xfe, 0x95, 0x5d,
	0x7f, 0xff, 0xfe, 0xfd, 0x8c, 0x21, 0xcd, 0xfd, 0x34, 0x8b, 0x0b, 0x58, 0x0d, 0xd2, 0xae, 0x21,
	0x78, 0xc3, 0x6a, 0x90, 0x70, 0x0d, 0xa4, 0x6e, 0x4f, 0x9f, 0x4f, 0x06, 0xcb, 0x9b, 0x23, 0xaa,
	0x96, 0x0d, 0xd8, 0xee, 0x77, 0xf0, 0x9b, 0x98, 0xed, 0xfa, 0xe3, 0xea, 0x3f, 0x00, 0x00, 0xff,
	0xff, 0x92, 0x4c, 0xe8, 0x8e, 0x73, 0x01, 0x00, 0x00,
}
