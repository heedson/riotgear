// Code generated by gnorm. Source: ../gnorm/templates/fields.gotmpl. DO NOT EDIT!

package armoury

import (
	"database/sql"

	"github.com/jackc/pgx/pgtype"
)

// IntField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type IntField string // nolint: golint

// Equals returns a WhereClause for this field.
func (f IntField) Equals(v int) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f IntField) GreaterThan(v int) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f IntField) LessThan(v int) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f IntField) GreaterOrEqual(v int) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f IntField) LessOrEqual(v int) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f IntField) NotEqual(v int) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f IntField) In(vals []int) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// SqlNullInt64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullInt64Field string // nolint: golint

// Equals returns a WhereClause for this field.
func (f SqlNullInt64Field) Equals(v sql.NullInt64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullInt64Field) GreaterThan(v sql.NullInt64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullInt64Field) LessThan(v sql.NullInt64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullInt64Field) GreaterOrEqual(v sql.NullInt64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullInt64Field) LessOrEqual(v sql.NullInt64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullInt64Field) NotEqual(v sql.NullInt64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullInt64Field) In(vals []sql.NullInt64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// StringField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type StringField string // nolint: golint

// Equals returns a WhereClause for this field.
func (f StringField) Equals(v string) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f StringField) GreaterThan(v string) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f StringField) LessThan(v string) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f StringField) GreaterOrEqual(v string) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f StringField) LessOrEqual(v string) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f StringField) NotEqual(v string) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f StringField) In(vals []string) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// SqlNullStringField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullStringField string // nolint: golint

// Equals returns a WhereClause for this field.
func (f SqlNullStringField) Equals(v sql.NullString) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullStringField) GreaterThan(v sql.NullString) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullStringField) LessThan(v sql.NullString) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullStringField) GreaterOrEqual(v sql.NullString) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullStringField) LessOrEqual(v sql.NullString) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullStringField) NotEqual(v sql.NullString) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullStringField) In(vals []sql.NullString) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// BoolField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type BoolField string // nolint: golint

// Equals returns a WhereClause for this field.
func (f BoolField) Equals(v bool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f BoolField) GreaterThan(v bool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f BoolField) LessThan(v bool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f BoolField) GreaterOrEqual(v bool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f BoolField) LessOrEqual(v bool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f BoolField) NotEqual(v bool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f BoolField) In(vals []bool) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// SqlNullBoolField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullBoolField string // nolint: golint

// Equals returns a WhereClause for this field.
func (f SqlNullBoolField) Equals(v sql.NullBool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullBoolField) GreaterThan(v sql.NullBool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullBoolField) LessThan(v sql.NullBool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullBoolField) GreaterOrEqual(v sql.NullBool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullBoolField) LessOrEqual(v sql.NullBool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullBoolField) NotEqual(v sql.NullBool) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullBoolField) In(vals []sql.NullBool) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// Float64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type Float64Field string // nolint: golint

// Equals returns a WhereClause for this field.
func (f Float64Field) Equals(v float64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f Float64Field) GreaterThan(v float64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f Float64Field) LessThan(v float64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f Float64Field) GreaterOrEqual(v float64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f Float64Field) LessOrEqual(v float64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f Float64Field) NotEqual(v float64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f Float64Field) In(vals []float64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// SqlNullFloat64Field is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type SqlNullFloat64Field string // nolint: golint

// Equals returns a WhereClause for this field.
func (f SqlNullFloat64Field) Equals(v sql.NullFloat64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f SqlNullFloat64Field) GreaterThan(v sql.NullFloat64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f SqlNullFloat64Field) LessThan(v sql.NullFloat64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f SqlNullFloat64Field) GreaterOrEqual(v sql.NullFloat64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f SqlNullFloat64Field) LessOrEqual(v sql.NullFloat64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f SqlNullFloat64Field) NotEqual(v sql.NullFloat64) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f SqlNullFloat64Field) In(vals []sql.NullFloat64) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// TimestamptzField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type TimestamptzField string // nolint: golint

// Equals returns a WhereClause for this field.
func (f TimestamptzField) Equals(v *pgtype.Timestamptz) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f TimestamptzField) GreaterThan(v *pgtype.Timestamptz) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f TimestamptzField) LessThan(v *pgtype.Timestamptz) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f TimestamptzField) GreaterOrEqual(v *pgtype.Timestamptz) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f TimestamptzField) LessOrEqual(v *pgtype.Timestamptz) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f TimestamptzField) NotEqual(v *pgtype.Timestamptz) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f TimestamptzField) In(vals []*pgtype.Timestamptz) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// TimestampField is a component that returns a WhereClause that contains a
// comparison based on its field and a strongly typed value.
type TimestampField string // nolint: golint

// Equals returns a WhereClause for this field.
func (f TimestampField) Equals(v *pgtype.Timestamp) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompEqual,
		Value: v,
	}
}

// GreaterThan returns a WhereClause for this field.
func (f TimestampField) GreaterThan(v *pgtype.Timestamp) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGreater,
		Value: v,
	}
}

// LessThan returns a WhereClause for this field.
func (f TimestampField) LessThan(v *pgtype.Timestamp) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLess,
		Value: v,
	}
}

// GreaterOrEqual returns a WhereClause for this field.
func (f TimestampField) GreaterOrEqual(v *pgtype.Timestamp) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompGTE,
		Value: v,
	}
}

// LessOrEqual returns a WhereClause for this field.
func (f TimestampField) LessOrEqual(v *pgtype.Timestamp) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompLTE,
		Value: v,
	}
}

// NotEqual returns a WhereClause for this field.
func (f TimestampField) NotEqual(v *pgtype.Timestamp) WhereClause {
	return Where{
		Field: string(f),
		Comp:  CompNE,
		Value: v,
	}
}

// In returns a WhereClause for this field.
func (f TimestampField) In(vals []*pgtype.Timestamp) WhereClause {
	values := make([]interface{}, len(vals))
	for x := range vals {
		values[x] = vals[x]
	}
	return InClause{
		Field: string(f),
		Vals:  values,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f SqlNullInt64Field) IsNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f SqlNullInt64Field) IsNotNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f SqlNullStringField) IsNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f SqlNullStringField) IsNotNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f SqlNullBoolField) IsNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f SqlNullBoolField) IsNotNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f SqlNullFloat64Field) IsNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f SqlNullFloat64Field) IsNotNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f TimestamptzField) IsNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f TimestamptzField) IsNotNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}

// IsNull returns a WhereClause that matches when this field is NULL.
func (f TimestampField) IsNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  true,
	}
}

// IsNotNull returns a WhereClause that matches when this field is not NULL.
func (f TimestampField) IsNotNull() WhereClause {
	return NullClause{
		Field: string(f),
		Null:  false,
	}
}
